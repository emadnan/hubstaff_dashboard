{"version":3,"file":"static/js/9585.6b1e9075.chunk.js","mappings":"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","sources":["views/reports/monthly/Monthly.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport Box from '@mui/material/Box'\nimport Toolbar from '@mui/material/Toolbar'\nimport Typography from '@mui/material/Typography'\nimport IconButton from '@mui/material/IconButton'\nimport Tooltip from '@mui/material/Tooltip'\nimport FileDownloadIcon from '@mui/icons-material/FileDownload'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\nimport { CTable, CTableBody, CTableHead, CTableHeaderCell, CTableRow } from '@coreui/react'\nimport { DatePicker, Card, Select, Form } from 'antd'\nimport { saveAs } from 'file-saver'\nimport json2csv from 'json2csv'\nimport moment from 'moment'\nimport dayjs from 'dayjs'\nimport PictureAsPdfSharpIcon from '@mui/icons-material/PictureAsPdfSharp'\nimport html2pdf from 'html2pdf.js'\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL\n\nconst {\n  cardStyle,\n  cardStyle2,\n  mystyle2,\n  mystyle,\n  head,\n  subhead,\n  arrowStyle,\n  tableHeaderCellStyle,\n} = {\n  cardStyle: {\n    width: '100%',\n  },\n  cardStyle2: {\n    width: '100%',\n    backgroundColor: '#FFFFFF ',\n  },\n  mystyle: {\n    color: 'white',\n    backgroundColor: '#0070FF ',\n    padding: '15px',\n    fontFamily: 'Arial',\n    textAlign: 'center',\n    alignSelf: 'flex-end',\n  },\n  mystyle2: {\n    backgroundColor: 'white ',\n    padding: '15px',\n    fontFamily: 'Arial',\n    fontSize: 14,\n    textAlign: 'center',\n    alignSelf: 'flex-end',\n  },\n  head: {\n    color: '#9E9E9E',\n  },\n  subhead: {\n    color: '#28B463',\n  },\n  arrowStyle: {\n    padding: '2px',\n    width: '40px',\n    color: 'black',\n  },\n  tableHeaderCellStyle: {\n    fontSize: 'medium',\n    fontWeight: 'bold',\n  },\n}\n\nexport default function Dashboard() {\n  const tableRef = useRef(null)\n  const [totalWorkingHoursOfMonth, setTotalWorkingHoursOfMonth] = useState('')\n  const [userId, setUserId] = useState()\n  const [month, setMonth] = useState([])\n  const [monthlyReportData, setMonthlyReportData] = useState([])\n  const [companies, setCompanies] = useState([])\n  const [totalProjects, setTotalProjects] = useState([])\n  const [totalNumberOfProjects, setTotalNumberOfProjects] = useState()\n  const [averageWorkingHoursOfDay, setAverageWorkingHoursOfDay] = useState(0)\n  const [age, setAge] = useState()\n  const [users, setUsers] = useState([])\n  const [currentUser, setCurrentUser] = useState([])\n  const [isReportPreview, setIsReportPreview] = useState(false)\n  const [selectedDate, setSelectedDate] = useState(null)\n\n  let local = JSON.parse(localStorage.getItem('user-info'))\n\n  const handleUserChange = (value) => {\n    const selectedUser = users.filter((user) => user.id === value)\n    setCurrentUser(selectedUser)\n    setUserId(value)\n    getMonthlyReport(value)\n    getAssignedProjects(value)\n    getCompanies(selectedUser)\n    setIsReportPreview(true)\n    setSelectedDate(null)\n  }\n\n  const onDateChange = (date, dateString) => {\n    setSelectedDate(dateString)\n    const selectedMonth = moment(dateString, 'YYYY-MM')\n    const startOfMonth = selectedMonth.clone().startOf('month').format('YYYY-MM-DD')\n    const endOfMonth = selectedMonth.clone().endOf('month').format('YYYY-MM-DD')\n    if (startOfMonth !== 'Invalid date' && endOfMonth !== 'Invalid date') {\n      getMonthlyReportOnMonthSelection(startOfMonth, endOfMonth, userId)\n    } else {\n      getMonthlyReport(userId)\n    }\n\n    const startMonthName = getMonthName(selectedMonth.month())\n    const endMonthName = getMonthName(selectedMonth.clone().endOf('month').month())\n    const dateRange = `${startMonthName} ${moment(startOfMonth).format(\n      'DD, YYYY',\n    )} - ${endMonthName} ${moment(endOfMonth).format('DD, YYYY')}`\n    setMonth(dateRange)\n  }\n\n  const getUsers = () => {\n    if (!local) {\n      console.log('Local variable is not available')\n      return\n    }\n    let filteredUsers = []\n\n    fetch(`${BASE_URL}/api/get_users`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (local.Users.role === 1) {\n          filteredUsers = data.Users\n        } else if (local.Users.role === 3) {\n          filteredUsers = data.Users.filter(\n            (user) =>\n              user.company_id === local.Users.company_id && user.role !== 3 && user.role !== 1,\n          )\n          console.log('filteredUsers in getUsers: ', filteredUsers)\n        } else if (local.Users.role === 5 || local.Users.role === 6 || local.Users.role === 7) {\n          filteredUsers = data.Users.filter((user) => user.id === local.Users.id)\n        }\n        setUsers(filteredUsers)\n      })\n      .catch((error) => console.log(error))\n  }\n\n  const getMonthName = (monthIndex) => {\n    const months = [\n      'JAN',\n      'FEB',\n      'MAR',\n      'APR',\n      'MAY',\n      'JUN',\n      'JUL',\n      'AUG',\n      'SEP',\n      'OCT',\n      'NOV',\n      'DEC',\n    ]\n    return months[monthIndex]\n  }\n\n  const getMonthlyReport = (userId) => {\n    if (!local) {\n      console.log('Local variable is not available')\n      return\n    }\n\n    fetch(`${BASE_URL}/api/calculateMonthlyActivity/${userId}`)\n      .then((response) => response.json())\n      .then((data) => {\n        const totalSeconds = data.project.reduce((total, project) => {\n          return total + project.hours * 3600 + project.minutes * 60 + project.seconds\n        }, 0)\n\n        const averageSeconds = totalSeconds / data.project.length\n        let averageHours = 0\n        let averageMinutes = 0\n\n        if (averageSeconds > 0) {\n          averageHours = Math.floor(averageSeconds / 3600)\n          averageMinutes = Math.floor((averageSeconds % 3600) / 60)\n        }\n\n        setAverageWorkingHoursOfDay(\n          `${averageHours.toString().padStart(2, '0')}: ${averageMinutes\n            .toString()\n            .padStart(2, '0')}`,\n        )\n        setTotalWorkingHoursOfMonth(\n          `${data.hours.toString().padStart(2, '0')}:${data.minutes\n            .toString()\n            .padStart(2, '0')}:${data.seconds.toString().padStart(2, '0')}`,\n        )\n\n        const projectDates = data.project.map((project) => new Date(project.date))\n        const minDate = new Date(Math.min(...projectDates))\n        const maxDate = new Date(Math.max(...projectDates))\n\n        const startDate = `${getMonthName(minDate.getMonth())} ${minDate\n          .getDate()\n          .toString()\n          .padStart(2, '0')}, ${minDate.getFullYear()}`\n        const endDate = `${getMonthName(maxDate.getMonth())} ${maxDate\n          .getDate()\n          .toString()\n          .padStart(2, '0')}, ${maxDate.getFullYear()}`\n        const dateRange = `${startDate} - ${endDate}`\n        setMonth(dateRange)\n\n        processData(data)\n      })\n      .catch((error) => console.log(error))\n  }\n\n  const getMonthlyReportOnMonthSelection = (\n    selectedMonthStartDate,\n    selectedMonthEndDate,\n    selectedUserId,\n  ) => {\n    fetch(\n      `${BASE_URL}/api/getSumByDateWithUserId/${selectedMonthStartDate}/${selectedMonthEndDate}/${selectedUserId}`,\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        const totalSeconds = data.projects.reduce((total, projects) => {\n          return total + projects.hours * 3600 + projects.minutes * 60 + projects.seconds\n        }, 0)\n\n        const averageSeconds = totalSeconds / data.projects.length\n        let averageHours = 0\n        let averageMinutes = 0\n\n        if (averageSeconds > 0) {\n          averageHours = Math.floor(averageSeconds / 3600)\n          averageMinutes = Math.floor((averageSeconds % 3600) / 60)\n        }\n\n        setAverageWorkingHoursOfDay(\n          `${averageHours.toString().padStart(2, '0')}: ${averageMinutes\n            .toString()\n            .padStart(2, '0')}`,\n        )\n        setTotalWorkingHoursOfMonth(`\n           ${data.hours.toString().padStart(2, '0')}: ${data.minutes\n          .toString()\n          .padStart(2, '0')}: ${data.seconds.toString().padStart(2, '0')}\n        `)\n\n        processDataOnMonthSelection(data)\n      })\n      .catch((error) => console.log(error))\n  }\n\n  // Function to format the date\n  const formatDate = (dateString) => {\n    const options = { weekday: 'short', day: '2-digit', month: 'short', year: 'numeric' }\n    const date = new Date(dateString)\n    return date.toLocaleDateString('en-US', options).toUpperCase()\n  }\n\n  // Function to format time as HH:MM\n  const formatTime = (totalSeconds) => {\n    const hours = Math.floor(totalSeconds / 3600)\n    const minutes = Math.floor((totalSeconds % 3600) / 60)\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`\n  }\n\n  // Function to convert time in HH:MM format to seconds\n  const timeInSeconds = (timeString) => {\n    const [hours, minutes] = timeString.split(':')\n    return parseInt(hours) * 3600 + parseInt(minutes) * 60\n  }\n\n  // Function to process the JSON data\n  const processData = (jsonData) => {\n    // Initialize an empty object to store the processed data\n    const processedData = {}\n\n    // Iterate over each object in the \"project\" array of the JSON data\n    jsonData.project.forEach((project) => {\n      // Extract the relevant properties from the project object\n      const { date, hours, minutes, seconds, project_name } = project\n\n      // Calculate the total time in seconds\n      const totalSeconds = hours * 3600 + minutes * 60 + seconds\n\n      // Format the date\n      const formattedDate = formatDate(date)\n\n      // If the date doesn't exist in the processedData object, create a new entry\n      if (!processedData[formattedDate]) {\n        processedData[formattedDate] = {\n          date: formattedDate,\n          totalWorkingHourOfDay: formatTime(0), // Initialize total working hours as 0\n          projects: [],\n        }\n      }\n\n      // Update the total working hours for the date\n      processedData[formattedDate].totalWorkingHourOfDay = formatTime(\n        timeInSeconds(processedData[formattedDate].totalWorkingHourOfDay) + totalSeconds,\n      )\n\n      // Find the corresponding projectData object in the projects array for the date\n      let projectData = processedData[formattedDate].projects.find(\n        (data) => data.project === project_name,\n      )\n\n      // If the projectData object doesn't exist, create a new one\n      if (!projectData) {\n        projectData = {\n          project: project_name,\n          HOURS: formatTime(totalSeconds), // Format the project hours\n          ACTIVITY: '-',\n        }\n        processedData[formattedDate].projects.push(projectData)\n      } else {\n        // Update the project hours\n        projectData.HOURS = formatTime(timeInSeconds(projectData.HOURS) + totalSeconds)\n      }\n    })\n\n    // Calculate the percentages for each project in each day\n    Object.values(processedData).forEach((dayData) => {\n      const totalDaySeconds = timeInSeconds(dayData.totalWorkingHourOfDay)\n      const totalSecondsPerDay = 7 * 3600 // Total seconds for 7 hours per day\n\n      if (totalDaySeconds !== 0) {\n        dayData.projects.forEach((projectData) => {\n          const projectSeconds = timeInSeconds(projectData.HOURS)\n          projectData.ACTIVITY = `${((projectSeconds / totalSecondsPerDay) * 100).toFixed(0)}%`\n        })\n      } else {\n        dayData.projects.forEach((projectData) => {\n          projectData.ACTIVITY = `0%`\n        })\n      }\n    })\n\n    setMonthlyReportData(Object.values(processedData))\n  }\n\n  // Function to process on Month Selection the JSON data\n  const processDataOnMonthSelection = (jsonData) => {\n    // Initialize an empty object to store the processed data\n    const processedData = {}\n\n    // Iterate over each object in the \"project\" array of the JSON data\n    jsonData.projects.forEach((project) => {\n      // Extract the relevant properties from the project object\n      const { date, hours, minutes, seconds, project_name } = project\n\n      // Calculate the total time in seconds\n      const totalSeconds = hours * 3600 + minutes * 60 + seconds\n\n      // Format the date\n      const formattedDate = formatDate(date)\n\n      // If the date doesn't exist in the processedData object, create a new entry\n      if (!processedData[formattedDate]) {\n        processedData[formattedDate] = {\n          date: formattedDate,\n          totalWorkingHourOfDay: formatTime(0), // Initialize total working hours as 0\n          projects: [],\n        }\n      }\n\n      // Update the total working hours for the date\n      processedData[formattedDate].totalWorkingHourOfDay = formatTime(\n        timeInSeconds(processedData[formattedDate].totalWorkingHourOfDay) + totalSeconds,\n      )\n\n      // Find the corresponding projectData object in the projects array for the date\n      let projectData = processedData[formattedDate].projects.find(\n        (data) => data.project === project_name,\n      )\n\n      // If the projectData object doesn't exist, create a new one\n      if (!projectData) {\n        projectData = {\n          project: project_name,\n          HOURS: formatTime(totalSeconds), // Format the project hours\n          ACTIVITY: '-',\n        }\n        processedData[formattedDate].projects.push(projectData)\n      } else {\n        // Update the project hours\n        projectData.HOURS = formatTime(timeInSeconds(projectData.HOURS) + totalSeconds)\n      }\n    })\n\n    // Calculate the percentages for each project in each day\n    Object.values(processedData).forEach((dayData) => {\n      const totalDaySeconds = timeInSeconds(dayData.totalWorkingHourOfDay)\n      const totalSecondsPerDay = 7 * 3600 // Total seconds for 7 hours per day\n\n      dayData.projects.forEach((projectData) => {\n        const projectSeconds = timeInSeconds(projectData.HOURS)\n        projectData.ACTIVITY = `${((projectSeconds / totalSecondsPerDay) * 100).toFixed(0)}%`\n      })\n    })\n\n    setMonthlyReportData(Object.values(processedData))\n  }\n\n  function getAssignedProjects(userId) {\n    if (!local) {\n      console.log('Local variable is not available')\n      return\n    }\n    let filteredAssignedProjects = []\n\n    fetch(`${BASE_URL}/api/get_assign_projects`)\n      .then((response) => response.json())\n      .then((data) => {\n        filteredAssignedProjects = data.Project_Assigns.filter(\n          (project) => project.assign_projects_user_id === userId,\n        )\n        console.log('filteredAssignedProjects: ', filteredAssignedProjects)\n        setTotalProjects(filteredAssignedProjects)\n        setTotalNumberOfProjects(filteredAssignedProjects.length)\n      })\n      .catch((error) => console.log(error))\n  }\n\n  function getCompanies(selectedUser) {\n    const companyId = selectedUser[0].company_id\n    let filteredCompanies = []\n    fetch(`${BASE_URL}/api/getcompany`)\n      .then((response) => response.json())\n      .then((data) => {\n        filteredCompanies = data.companies.filter((company) => company.id === companyId)\n        setCompanies(filteredCompanies)\n      })\n      .catch((error) => console.log(error))\n  }\n\n  useEffect(() => {\n    getUsers()\n  }, [userId])\n\n  const handleDownloadCSV = () => {\n    const employeeName = currentUser[0].name\n    const startDate = new Date(month.split(' - ')[0])\n    const monthName = startDate.toLocaleString('en-US', { month: 'long' })\n    const year = startDate.getFullYear()\n    // Flatten the nested data structure\n    const flattenedData = monthlyReportData\n      .map((item) => {\n        const flattenedProjects = item.projects.map((project) => ({\n          DATE: item.date,\n          'TOTAL DAY HOURS': item.totalWorkingHourOfDay,\n          PROJECT: project.project,\n          HOURS: project.HOURS,\n          ACTIVITY: project.ACTIVITY,\n        }))\n\n        return flattenedProjects\n      })\n      .flat()\n\n    // Generate the CSV data\n    const csvData = json2csv.parse(flattenedData, {\n      fields: ['DATE', 'TOTAL DAY HOURS', 'PROJECT', 'HOURS', 'ACTIVITY'],\n      header: false, // We will manually add the header later\n    })\n\n    // Create the header row\n    const headerRow = 'DATE,TOTAL DAY HOURS,PROJECT,HOURS,ACTIVITY'\n\n    // Create the merged cell row with the Monthly Report, Employee name, and Month Date Range\n    const mergedCellRow = `Monthly Report\\nEmployee: ${employeeName}\\nMonth: ${monthName}-${year}\\nTotal Hours of ${monthName}-${year}: ${totalWorkingHoursOfMonth}\\nAVG. Working Hours of Day in ${monthName}-${year}: ${averageWorkingHoursOfDay}\\n`\n\n    // Combine the merged cell row, header row, and CSV data\n    const modifiedCsvData = `${mergedCellRow}\\n${headerRow}\\n${csvData}`\n\n    const csvBlob = new Blob([modifiedCsvData], { type: 'text/csv;charset=utf-8' })\n    saveAs(csvBlob, `${currentUser[0].name} Monthly-Report.csv`)\n  }\n\n  const handleDownloadPDF = () => {\n    const input = tableRef.current\n\n    html2pdf()\n      .set({\n        margin: 0.5,\n        filename: `${currentUser[0].name} Monthly-Report.pdf`,\n        image: { type: 'jpeg', quality: 0.98 },\n        html2canvas: { scale: 2, logging: true },\n        jsPDF: { unit: 'mm', format: 'a3' },\n      })\n      .from(input)\n      .save()\n  }\n\n  return (\n    <Box>\n      <Box className=\"row\">\n        <Box className=\"col-md 6\">\n          <Typography variant=\"h4\">Monthly Reports</Typography>\n        </Box>\n      </Box>\n      <Box className=\"row justify-content-between\" sx={{ mt: 1 }}>\n        <Box className=\"col-md-3\">\n          <DatePicker\n            placeholder=\"SELECT MONTH\"\n            onChange={onDateChange}\n            value={selectedDate ? dayjs(selectedDate, 'YYYY-MM') : null}\n            picker=\"month\"\n            disabled={!isReportPreview}\n            style={{\n              width: '100%',\n            }}\n          />\n        </Box>\n\n        <Box\n          className=\"col-md-7\"\n          sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n          }}\n        >\n          <Box className=\"col-md-5\">\n            <Form.Item name=\"select\" hasFeedback>\n              <Select placeholder=\"SELECT EMPLOYEE\" onChange={handleUserChange}>\n                {users.map((user) => (\n                  <Select.Option value={user.id} key={user.id}>\n                    {user.name}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Box>\n        </Box>\n      </Box>\n\n      {isReportPreview && isReportPreview === true ? (\n        <div ref={tableRef}>\n          <Box mt={2}>\n            <Card style={cardStyle}>\n              <Box className=\"row\">\n                <Box className=\"col-md-3\">\n                  <Typography variant=\"h6\" sx={head}>\n                    NO. OF ASSIGNED PROJECTS\n                  </Typography>\n                  <Typography variant=\"h4\" sx={subhead}>\n                    {totalNumberOfProjects}\n                  </Typography>\n                </Box>\n                <Box className=\"col-md-3\">\n                  <Typography variant=\"h6\" sx={head}>\n                    TOTAL HOURS OF MONTH\n                  </Typography>\n                  <Typography variant=\"h4\" sx={subhead}>\n                    {totalWorkingHoursOfMonth}\n                  </Typography>\n                </Box>\n                <Box className=\"col-md-3\">\n                  <Typography variant=\"h6\" sx={head}>\n                    AVG. WORKING HOURS OF DAY\n                  </Typography>\n                  <Typography variant=\"h4\" sx={subhead}>\n                    {averageWorkingHoursOfDay}\n                  </Typography>\n                </Box>\n              </Box>\n            </Card>\n          </Box>\n          <Box sx={{ width: '100%', mt: 2 }}>\n            <Card style={cardStyle2}>\n              <h5 style={head}>ASSIGNED PROJECTS</h5>\n              <CTable\n                align=\"middle\"\n                className=\"mb-0 border\"\n                hover\n                responsive\n                style={{ marginTop: '20px' }}\n              >\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\" style={mystyle}>\n                      Project Name\n                    </CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\" style={mystyle}>\n                      Stream Name\n                    </CTableHeaderCell>\n                  </CTableRow>\n\n                  {totalProjects.map((project, index) => (\n                    <CTableRow key={index}>\n                      <CTableHeaderCell className=\"text-center\" style={mystyle2}>\n                        {project.project_name}\n                      </CTableHeaderCell>\n                      <CTableHeaderCell className=\"text-center\" style={mystyle2}>\n                        {project.stream_name}\n                      </CTableHeaderCell>\n                    </CTableRow>\n                  ))}\n                </CTableHead>\n\n                <CTableBody></CTableBody>\n              </CTable>\n            </Card>\n          </Box>\n          <Box sx={{ width: '100%', mt: 2 }}>\n            <Paper sx={{ width: '100%', mb: 2 }}>\n              <Toolbar\n                sx={{\n                  pl: { sm: 4 },\n                  pr: { xs: 2, sm: 2 },\n                  pt: 2,\n                  mb: 2,\n                }}\n              >\n                {companies.map((company) => (\n                  <Typography\n                    sx={{ flex: '1 1 100%', color: 'blue' }}\n                    variant=\"h4\"\n                    id=\"tableTitle\"\n                    component=\"div\"\n                    key={company.id}\n                  >\n                    {company.company_name}\n                    <span style={{ fontSize: 'medium', color: 'gray', ml: 4 }}>{company.city}</span>\n                  </Typography>\n                ))}{' '}\n                <Tooltip title=\"Generate CSV Report\">\n                  <IconButton>\n                    <FileDownloadIcon onClick={handleDownloadCSV} />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Generate PDF Report\">\n                  <IconButton>\n                    <PictureAsPdfSharpIcon onClick={handleDownloadPDF} />\n                  </IconButton>\n                </Tooltip>\n              </Toolbar>\n\n              <Box className=\"row\" style={{ width: '90%', margin: 'auto' }}>\n                <Box className=\"col-md-6\">\n                  <Typography variant=\"h5\" sx={head}>\n                    EMPLOYEE NAME\n                  </Typography>\n                  <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\n                    {currentUser[0].name}\n                  </Typography>\n                </Box>\n                <Box className=\"col-md-6\">\n                  <Typography variant=\"h5\" sx={head}>\n                    MONTH DATE RANGE\n                  </Typography>\n                  <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\n                    {month}\n                  </Typography>\n                </Box>\n              </Box>\n\n              <div style={{ width: '90%', margin: 'auto', justifyItems: 'center' }}>\n                <TableContainer>\n                  <Table sx={{ minWidth: 650, mb: 4 }}>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell sx={tableHeaderCellStyle}>DATE</TableCell>\n                        <TableCell sx={tableHeaderCellStyle}>TOTAL DAY HOURS</TableCell>\n                        <TableCell sx={tableHeaderCellStyle}>PROJECTS</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {monthlyReportData.map((item) => (\n                        <TableRow key={item.date}>\n                          <TableCell style={{ fontSize: 'large' }}>{item.date}</TableCell>\n                          <TableCell style={{ fontSize: 'large' }}>\n                            {item.totalWorkingHourOfDay}\n                          </TableCell>\n                          <TableCell>\n                            <Table>\n                              <TableHead>\n                                <TableRow>\n                                  <TableCell sx={tableHeaderCellStyle}>PROJECT</TableCell>\n                                  <TableCell sx={tableHeaderCellStyle}>HOURS</TableCell>\n                                  <TableCell sx={tableHeaderCellStyle}>ACTIVITY</TableCell>\n                                </TableRow>\n                              </TableHead>\n                              <TableBody>\n                                {item.projects.map((project, index) => (\n                                  <TableRow key={index}>\n                                    <TableCell>{project.project}</TableCell>\n                                    <TableCell>{project.HOURS}</TableCell>\n                                    <TableCell>{project.ACTIVITY}</TableCell>\n                                  </TableRow>\n                                ))}\n                              </TableBody>\n                            </Table>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </div>\n            </Paper>\n          </Box>\n        </div>\n      ) : (\n        <Box mt={2}>\n          <Card style={cardStyle}>\n            <Box className=\"row\">\n              <Typography variant=\"h6\" sx={{ color: '#9E9E9E', textAlign: 'center' }}>\n                PLEASE SELECT THE EMPLOYEE, WHOM YOU WANNA GENERATE REPORT\n              </Typography>\n            </Box>\n          </Card>\n        </Box>\n      )}\n    </Box>\n  )\n}\n"],"names":["BASE_URL","process","cardStyle","width","cardStyle2","backgroundColor","mystyle2","padding","fontFamily","fontSize","textAlign","alignSelf","mystyle","color","head","subhead","tableHeaderCellStyle","fontWeight","Dashboard","tableRef","useRef","_useState","useState","_useState2","_slicedToArray","totalWorkingHoursOfMonth","setTotalWorkingHoursOfMonth","_useState3","_useState4","userId","setUserId","_useState5","_useState6","month","setMonth","_useState7","_useState8","monthlyReportData","setMonthlyReportData","_useState9","_useState10","companies","setCompanies","_useState11","_useState12","totalProjects","setTotalProjects","_useState13","_useState14","totalNumberOfProjects","setTotalNumberOfProjects","_useState15","_useState16","averageWorkingHoursOfDay","setAverageWorkingHoursOfDay","_useState17","_useState18","_useState19","_useState20","users","setUsers","_useState21","_useState22","currentUser","setCurrentUser","_useState23","_useState24","isReportPreview","setIsReportPreview","_useState25","_useState26","selectedDate","setSelectedDate","local","JSON","parse","localStorage","getItem","getMonthName","monthIndex","getMonthlyReport","fetch","concat","then","response","json","data","averageSeconds","project","reduce","total","hours","minutes","seconds","length","averageHours","averageMinutes","Math","floor","toString","padStart","projectDates","map","Date","date","minDate","min","apply","_toConsumableArray","maxDate","max","startDate","getMonth","getDate","getFullYear","endDate","dateRange","processData","catch","error","console","log","getMonthlyReportOnMonthSelection","selectedMonthStartDate","selectedMonthEndDate","selectedUserId","projects","processDataOnMonthSelection","formatDate","dateString","toLocaleDateString","weekday","day","year","toUpperCase","formatTime","totalSeconds","timeInSeconds","timeString","_timeString$split","split","_timeString$split2","parseInt","jsonData","processedData","forEach","project_name","formattedDate","totalWorkingHourOfDay","projectData","find","HOURS","ACTIVITY","push","Object","values","dayData","totalDaySeconds","projectSeconds","toFixed","useEffect","filteredUsers","Users","role","filter","user","company_id","id","getUsers","_jsxs","Box","children","_jsx","className","Typography","variant","sx","mt","DatePicker","placeholder","onChange","selectedMonth","moment","startOfMonth","clone","startOf","format","endOfMonth","endOf","startMonthName","endMonthName","value","dayjs","picker","disabled","style","display","flexDirection","justifyContent","Form","name","hasFeedback","Select","selectedUser","filteredAssignedProjects","Project_Assigns","assign_projects_user_id","getAssignedProjects","companyId","filteredCompanies","company","getCompanies","ref","Card","CTable","align","hover","responsive","marginTop","CTableHead","CTableRow","CTableHeaderCell","index","stream_name","CTableBody","Paper","mb","Toolbar","pl","sm","pr","xs","pt","flex","component","company_name","ml","city","Tooltip","title","IconButton","FileDownloadIcon","onClick","employeeName","monthName","toLocaleString","flattenedData","item","DATE","PROJECT","flat","csvData","json2csv","fields","header","mergedCellRow","modifiedCsvData","csvBlob","Blob","type","saveAs","PictureAsPdfSharpIcon","input","current","html2pdf","set","margin","filename","image","quality","html2canvas","scale","logging","jsPDF","unit","from","save","justifyItems","TableContainer","Table","minWidth","TableHead","TableRow","TableCell","TableBody"],"sourceRoot":""}